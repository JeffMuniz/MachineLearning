spring:
  application:
    name: /worker-avro-agendamento-cancelamento-pedido-converter
  main:
    banner-mode: 'OFF'
  kafka:
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS}
    listener:
      ack-mode: manual
      concurrency: 8
    consumer:
      group-id: worker-avro-agendamento-cancelamento-pedido-converter-group-1
      enable-auto-commit: false
      auto-offset-reset: earliest
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      properties:
        schema:
          registry:
            url: ${SPRING_KAFKA_CONSUMER_PROPERTIES_SCHEMA_REGISTRY_URL}
        specific:
          avro:
            reader: false
        spring:
          json:
            trusted:
              packages: io.cloudevents,br.com.mac,*
      inbound-payload-topic: topic-conn-conf-agendamento-cancelamento-pedido
      key-deserializer:  org.apache.kafka.common.serialization.StringDeserializer
    producer:
      client-id: worker-avro-agendamento-cancelamento-pedido-converter-client-1
      retries: 1
      acks: 1
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      outbound-payload-topic: topic-conf-agendamento-cancelamento-pedido
      outbound-schema-id: ${SPRING_PRODUCER_OUTBOUND-SCHEMA-ID}
      outbound-event-type: topic-conf-agendamento-cancelamento-pedido
      key-serializer:  org.apache.kafka.common.serialization.StringSerializer
      properties:
        schema:
          registry:
            url: ${SPRING_KAFKA_CONSUMER_PROPERTIES_SCHEMA_REGISTRY_URL}
        auto:
          register:
            schemas: false

mac:
  kafka:
    consumer:
      mode: MAIN
      support-cloud-events: false
    producer:
      support-cloud-events: true
      dlq:
        support-cloud-events: false
    errors:
      retry:
        topic:
          name: topic-conn-conf-agendamento-cancelamento-pedido-retry
        attempts: 0
        wait-seconds: 0
      deadletterqueue:
        topic:
          name: topic-conn-conf-agendamento-cancelamento-pedido-dlq
      tolerance:
        level: ALL
  avro:
    converter:
      mapping:
        file: /opt/mac/field-mapping.json

logging:
  level:
    ROOT: ${LOGGING_LEVEL_ROOT} #QA=DEBUG; STAGING=DEBUG; PROD=INFO
    br:
      com:
        mac: ${LOGGING_BR_COM_mac} #QA=DEBUG; STAGING=DEBUG; PROD=INFO
server:
  port: ${SERVER_PORT}
